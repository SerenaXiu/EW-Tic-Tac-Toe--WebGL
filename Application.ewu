$version 11.00

// To do:
// 
// - Open the 'Application' component for editing. It represents your entire GUI. \
// Use widgets, views, event handlers and effects from the Gallery to assemble there \
// your desired GUI look and feel.
// 
// - Create your own GUI components, widgets, panels, etc. The Gallery folder 'Component \
// Templates' contains for this purpose various templates you can simply add to the \
// unit and thus start your own component development.
// 
// - You can add your own bitmap and font resources to the unit. Use the templates \
// 'Bitmap Resource' and 'Font Resource' from the Gallery folder 'Resources' for \
// this purpose.
// 
// - You can add here also constants to store e.g. multilingual text fragments. Use \
// for this purpose the template 'Constant' from the Gallery folder 'Chora'.
// 
// - To add an interface for communication with the target device use the template \
// 'Device Interface' from the Gallery folder 'Device'.
note legend Note4
{
  attr Bounds = <19,80,299,390>;
}

$rect <20,30,220,70>
$output false
class Application : Core::Root
{
  $rect <280,0,460,40>
  inherited method Init()
  {
    PresentDialog( GameTitleFull, Effects::SlideDownCentered, Effects::SlideUpCentered, null, null, 
                   Effects::ShowHideCentered, Effects::ShowHideCentered, null /*method called when presented*/, null, false );


    // when full title screen, resetBtn and gamefields are pressed, resets timer for screensaver!
    var int32 row;
    var int32 col;
    for ( row = 0; row < 3; row++ )
      for ( col = 0; col < 3;  col++ )
        vGameField.aFieldItems[row,col].SimpleTouchHandler.OnEnter = ResetTimer;
    GameTitleFull.SimpleTouchHandler.OnEnter = ResetTimer;
    ResetBtn.OnEnter = ResetTimer;  

    // Regarding wins display
    attachobserver onUpdateP1Wins, vGameField.Player1;
    attachobserver onUpdateP2Wins, vGameField.Player2; 
    //linkToP1Wins = ^vGameField.Player1.TotalWins;
    //linkToP2Wins = ^vGameField.Player2.TotalWins;    
  }

  $rect <0,330,200,370>
  inherited property Bounds = <0,0,240,320>;

  // Screensaver
  note group nScreensaver
  {
    attr Bounds = <270,130,490,330>;
  }

  $rect <281,200,481,240>
  slot StartTimer
  {
    /*if()
    {}
    else {            */
    TimerScreenSaver.Enabled = true;  // }
  }

  $rect <281,239,481,279>
  object Core::Timer TimerScreenSaver
  {
    preset OnTrigger = StartScreenSaver;
    preset Period = 20000;
    preset Begin = 0;
    preset Enabled = false;
  }

  // This is a slot method.
  $rect <281,160,481,200>
  slot StartScreenSaver
  {
    PresentDialog( GameTitleFull, Effects::SlideDownCentered, Effects::SlideUpCentered, null, null, 
                   Effects::ShowHideCentered, Effects::ShowHideCentered, null, null, false );
  }

  $rect <270,80,470,120>
  slot onTouchResetBtn
  {
    //TRYING
    Remove( vGameField);
    vGameField = new Game::GameField;
    Add( vGameField, 180 );

    attachobserver onUpdateP1Wins, vGameField.Player1;
    attachobserver onUpdateP2Wins, vGameField.Player2;  

  }

  $rect <20,20,160,60>
  object Game::GameTitle GameTitleFull;

  $rect <20,20,160,60>
  object Views::Rectangle Rectangle
  {
    preset StackingPriority = 0;
    preset Bounds = <0,0,240,320>;
    preset Color = Game::Mint;
    preset AlphaBlended = true;
  }

  $rect <20,20,160,60>
  object Game::GameField GameField
  {
    preset Bounds = <0,0,240,320>;
  }

  $rect <270,40,470,80>
  var Game::GameField vGameField = GameField;

  $rect <20,20,160,60>
  object WidgetSet::PushButton ResetBtn
  {
    preset Bounds = <52,269,189,306>;
    preset OnPress = onTouchResetBtn;
    preset Label = "Reset";
    preset Appearance = WidgetSet::PushButton_Medium;
  }

  $rect <20,20,160,60>
  object Views::Text vTotalWins
  {
    preset Bounds = <61,239,179,269>;
    preset String = "- Total Wins -\nP1: 0   P2: 0";
    preset Font = Game::FontSmall;
  }

  $rect <281,280,481,320>
  slot ResetTimer
  {
    //Text.String = "Pressed!!!!";

    // If the timer is already active, stop and reset it now.
    // If the timer was inactive, nothing will happen.
    TimerScreenSaver.Enabled = false;

    // Then start the timer again.
    TimerScreenSaver.Enabled = true;
  }

  $rect <510,170,710,210>
  slot onUpdateP1Wins
  {
    pP1Wins += 1;
  }

  $rect <510,40,710,80>
  property int32 pP1Wins;

  $rect <510,80,710,120>
  onset pP1Wins
  {
    // The value doesn't change - nothing to do.
    if ( pure pP1Wins == value )
      return;

    // Remember the property's new value.
    pure pP1Wins = value;

    // TO DO:
    // 
    // Now you can handle the alternation of the property.
    vTotalWins.String = "- Total Wins -\nP1: "+string(pP1Wins)+"   P2: "+string(pP2Wins);
  }

  $rect <510,120,710,160>
  onget pP1Wins
  {
    return pure pP1Wins;
  }

  $rect <700,170,900,210>
  slot onUpdateP2Wins
  {
    pP2Wins += 1;
  }

  $rect <710,40,910,80>
  property int32 pP2Wins;

  $rect <710,80,910,120>
  onset pP2Wins
  {
    // The value doesn't change - nothing to do.
    if ( pure pP2Wins == value )
      return;

    // Remember the property's new value.
    pure pP2Wins = value;

    // TO DO:
    // 
    // Now you can handle the alternation of the property.
    vTotalWins.String = "- Total Wins -\nP1: "+string(pP1Wins)+"   P2: "+string(pP2Wins);
  }

  $rect <710,120,910,160>
  onget pP2Wins
  {
    return pure pP2Wins;
  }

  // Player Wins
  note group nPlayerWins
  {
    attr Bounds = <500,0,920,220>;
  }
}

$rect <240,30,440,70>
$variant WebGL, true
vclass Application2 : Application::Application;
