$version 11.00

// To do:
// 
// - Open the 'Application' component for editing. It represents your entire GUI. \
// Use widgets, views, event handlers and effects from the Gallery to assemble there \
// your desired GUI look and feel.
// 
// - Create your own GUI components, widgets, panels, etc. The Gallery folder 'Component \
// Templates' contains for this purpose various templates you can simply add to the \
// unit and thus start your own component development.
// 
// - You can add your own bitmap and font resources to the unit. Use the templates \
// 'Bitmap Resource' and 'Font Resource' from the Gallery folder 'Resources' for \
// this purpose.
// 
// - You can add here also constants to store e.g. multilingual text fragments. Use \
// for this purpose the template 'Constant' from the Gallery folder 'Chora'.
// 
// - To add an interface for communication with the target device use the template \
// 'Device Interface' from the Gallery folder 'Device'.
note legend Note4
{
  attr Bounds = <19,80,299,390>;
}

$rect <20,30,220,70>
$output false
class Application : Core::Root
{
  $rect <280,170,460,210>
  inherited method Init()
  {
    P1Wins = ^vGameField.Player1.TotalWins;
    P2Wins = ^vGameField.Player2.TotalWins;
    //PresentDialog( vGameField, null, null, null, null, null, null, null, null, false );
    PresentDialog( GameTitleFull, Effects::SlideDownCentered, Effects::SlideUpCentered, null, null, 
                   Effects::ShowHideCentered, Effects::ShowHideCentered, null, null, false );
    //PresentDialog( GameTitleFull, Effects::SlideDownCentered, Effects::SlideUpCentered, null, null, 
                   //Effects::ShowHideCentered, Effects::ShowHideCentered, StartTimer, null, false );
  }

  $rect <270,0,470,40>
  inherited property Bounds = <0,0,240,320>;

  // Disabled
  note group Note
  {
    attr Bounds = <519,0,819,200>;
  }

  $rect <560,60,760,100>
  slot StartTimer
  {
    Timer1.Enabled = true;
  }

  $rect <560,99,760,139>
  object Core::Timer Timer1
  {
    preset OnTrigger = StartScreenSaver1;
    preset Period = 5000;
    preset Begin = 0;
    preset Enabled = true;
  }

  // This is a slot method.
  $rect <560,140,760,180>
  slot StartScreenSaver1
  {
    //if()
    PresentDialog( GameTitleFull, Effects::SlideDownCentered, Effects::SlideUpCentered, null, null, 
                   Effects::ShowHideCentered, Effects::ShowHideCentered, StartTimer, null, false );
  }

  $rect <270,110,470,150>
  slot onTouchResetBtn
  {
    //TRYING
    Remove( vGameField);
    vGameField = new Game::GameField;
    Add( vGameField, 180 );

  }

  $rect <20,20,160,60>
  object Game::GameTitle GameTitleFull;

  $rect <20,20,160,60>
  object Views::Rectangle Rectangle
  {
    preset StackingPriority = 0;
    preset Bounds = <0,0,240,320>;
    preset Color = Game::Mint;
    preset AlphaBlended = true;
  }

  $rect <20,20,160,60>
  object Game::GameField GameField
  {
    preset Bounds = <0,0,240,320>;
  }

  $rect <270,60,470,100>
  var Game::GameField vGameField = GameField;

  $rect <20,20,160,60>
  object WidgetSet::PushButton ResetBtn
  {
    preset Bounds = <52,269,189,306>;
    preset OnPress = onTouchResetBtn;
    preset Label = "Reset";
    preset Appearance = WidgetSet::PushButton_Medium;
  }

  $rect <20,20,160,60>
  object Views::Text Text
  {
    preset Bounds = <61,239,179,269>;
    preset String = "- Total Wins -\nP1: 0   P2: 0";
    preset Font = Game::FontSmall;
  }

  $rect <260,240,460,280>
  property ^int32 P1Wins;

  $rect <260,280,460,320>
  onset P1Wins
  {
    // The value doesn't change - nothing to do.
    if ( pure P1Wins == value )
      return;

    // Remember the property's new value.
    pure P1Wins = value;

    // TO DO:
    // 
    // Now you can handle the alternation of the property.
    Text.String = "- Total Wins -\nP1: "+P1Wins^+"   P2: 0";
  }

  $rect <260,320,460,360>
  onget P1Wins
  {
    return pure P1Wins;
  }

  $rect <480,240,680,280>
  property ^int32 P2Wins;

  $rect <480,280,680,320>
  onset P2Wins
  {
    // The value doesn't change - nothing to do.
    if ( pure P2Wins == value )
      return;

    // Remember the property's new value.
    pure P2Wins = value;

    // TO DO:
    // 
    // Now you can handle the alternation of the property.
    Text.String = "- Total Wins -\nP1: "+P2Wins^+"   P2: 0";
  }

  $rect <480,320,680,360>
  onget P2Wins
  {
    return pure P2Wins;
  }
}
