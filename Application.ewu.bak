$version 11.00

// To do:
// 
// - Open the 'Application' component for editing. It represents your entire GUI. \
// Use widgets, views, event handlers and effects from the Gallery to assemble there \
// your desired GUI look and feel.
// 
// - Create your own GUI components, widgets, panels, etc. The Gallery folder 'Component \
// Templates' contains for this purpose various templates you can simply add to the \
// unit and thus start your own component development.
// 
// - You can add your own bitmap and font resources to the unit. Use the templates \
// 'Bitmap Resource' and 'Font Resource' from the Gallery folder 'Resources' for \
// this purpose.
// 
// - You can add here also constants to store e.g. multilingual text fragments. Use \
// for this purpose the template 'Constant' from the Gallery folder 'Chora'.
// 
// - To add an interface for communication with the target device use the template \
// 'Device Interface' from the Gallery folder 'Device'.
note legend Note4
{
  attr Bounds = <19,80,299,390>;
}

$rect <250,30,450,70>
$output false
class GameScreen : Core::Group
{
  $rect <280,0,460,40>
  inherited method Init()
  {
      // Regarding wins display
    attachobserver onUpdateP1Wins, vGameField.Player1;
    attachobserver onUpdateP2Wins, vGameField.Player2;

    //ResetBtn.OnActivate = onTouchResetBtn;  


       

  }

  $rect <0,330,200,370>
  inherited property Bounds = <0,0,240,320>;

  $rect <270,80,470,120>
  slot onTouchResetBtn
  {
    Remove( vGameField);
    vGameField = new Game::GameField;
    Add( vGameField, 180 );

    attachobserver onUpdateP1Wins, vGameField.Player1;
    attachobserver onUpdateP2Wins, vGameField.Player2;  

  }

  $rect <20,20,160,60>
  object Views::Rectangle Background
  {
    preset StackingPriority = 0;
    preset Bounds = <0,0,240,320>;
    preset Color = Game::Mint;
    preset AlphaBlended = true;
  }

  $rect <20,20,160,60>
  object Core::WipeTouchHandler WipeTouchHandler
  {
    preset Bounds = <0,0,240,319>;
    preset OnBottom;
    preset NoOfFingers = 1;
  }

  $rect <20,20,160,60>
  object Game::GameField GameField
  {
    preset Bounds = <0,0,240,320>;
  }

  $rect <270,40,470,80>
  var Game::GameField vGameField = GameField;

  $rect <20,20,160,60>
  object Game::PushButton ResetBtn
  {
    preset Bounds = <62,269,178,304>;
    preset OnActivate = onTouchResetBtn;
    preset BtnText = "Reset";
  }

  $rect <20,20,160,60>
  object Views::Text vTotalWins
  {
    preset Bounds = <61,239,179,269>;
    preset String = "- Total Wins -\nP1: 0   P2: 0";
    preset Font = Game::FontSmall;
  }

  $rect <510,170,710,210>
  slot onUpdateP1Wins
  {
    pP1Wins += 1;
  }

  $rect <510,40,710,80>
  property int32 pP1Wins;

  $rect <510,80,710,120>
  onset pP1Wins
  {
    // The value doesn't change - nothing to do.
    if ( pure pP1Wins == value )
      return;

    // Remember the property's new value.
    pure pP1Wins = value;

    // TO DO:
    // 
    // Now you can handle the alternation of the property.
    vTotalWins.String = "- Total Wins -\nP1: "+string(pP1Wins)+"   P2: "+string(pP2Wins);
  }

  $rect <510,120,710,160>
  onget pP1Wins
  {
    return pure pP1Wins;
  }

  $rect <700,170,900,210>
  slot onUpdateP2Wins
  {
    pP2Wins += 1;
  }

  $rect <710,40,910,80>
  property int32 pP2Wins;

  $rect <710,80,910,120>
  onset pP2Wins
  {
    // The value doesn't change - nothing to do.
    if ( pure pP2Wins == value )
      return;

    // Remember the property's new value.
    pure pP2Wins = value;

    // TO DO:
    // 
    // Now you can handle the alternation of the property.
    vTotalWins.String = "- Total Wins -\nP1: "+string(pP1Wins)+"   P2: "+string(pP2Wins);
  }

  $rect <710,120,910,160>
  onget pP2Wins
  {
    return pure pP2Wins;
  }

  // Player Wins
  note group nPlayerWins
  {
    attr Bounds = <500,0,920,220>;
  }
}

$rect <20,30,220,70>
$output false
class Application : Core::Root
{
  $rect <270,30,470,70>
  inherited method Init()
  {
    PresentDialog( vGameScreen, null, null, null, null, null, null, null, null, false );
    PresentDialog( vGameTitleFull, Effects::SlideDownCentered, Effects::SlideUpCentered, null, null, 
                   Effects::ShowHideCentered, Effects::ShowHideCentered, null /*method called when presented*/, null, false );

    vGameTitleFull.SimpleTouchHandler.OnPress =   DismissScreenSaver;
    vGameScreen.WipeTouchHandler.OnBottom = StartScreenSaver;
    vOtherScreen.WipeTouchHandler.OnBottom = StartScreenSaver;

    vGameScreen.WipeTouchHandler.OnLeft = onSwipeL;
    vOtherScreen.WipeTouchHandler.OnRight = onSwipeR;

    vGameTitleFull.SimpleTouchHandler.OnEnter = StartTimer;

    // when full title screen, resetBtn and gamefields are pressed, resets timer for screensaver!
    var int32 row;
    var int32 col;
    for ( row = 0; row < 3; row++ )
      for ( col = 0; col < 3;  col++ )
        vGameScreen.vGameField.aFieldItems[row,col].SimpleTouchHandler.OnEnter = ResetTimer;
    vGameTitleFull.SimpleTouchHandler.OnEnter = ResetTimer;


    attachobserver ResetTimer, null, 1251;

      

       
  }

  $rect <270,-9,470,31>
  inherited property Bounds = <0,0,240,320>;

  // Screensaver
  note group nScreensaver
  {
    attr Bounds = <260,119,480,400>;
  }

  $rect <271,149,471,189>
  slot StartTimer
  {
    /*if()
    {}
    else {            */
    TimerScreenSaver.Enabled = true;  // }
  }

  $rect <269,229,469,269>
  object Core::Timer TimerScreenSaver
  {
    preset OnTrigger = StartScreenSaver;
    preset Period = 30000;
    preset Begin = 0;
    preset Enabled = false;
  }

  // This is a slot method.
  $rect <269,268,469,308>
  slot StartScreenSaver
  {
    trace sender, "has invoked Screensaver!";
    PresentDialog( vGameTitleFull, Effects::SlideDownCentered, Effects::SlideUpCentered, null, null, 
                   Effects::ShowHideCentered, Effects::ShowHideCentered, null, null, false );
    TimerScreenSaver.Enabled = false;
  }

  $rect <20,20,160,60>
  object Views::Rectangle Background
  {
    preset StackingPriority = 0;
    preset Bounds = <0,0,240,320>;
    preset Color = Game::White;
    preset AlphaBlended = true;
  }

  $rect <269,189,469,229>
  slot ResetTimer
  {
    //Text.String = "Pressed!!!!";

    // If the timer is already active, stop and reset it now.
    // If the timer was inactive, nothing will happen.
    TimerScreenSaver.Enabled = false;

    // Then start the timer again.
    TimerScreenSaver.Enabled = true;
  }

  $rect <490,170,690,210>
  var Application::OtherScreen vOtherScreen = Application::OtherScreen1;

  $rect <720,239,920,279>
  slot onSwipeR
  {
      trace "swiped right";
      SwitchToDialog( vGameScreen, Effects::SlideRightCentered, Effects::SlideLeftCentered, null, Effects::SlideLeftCentered, null,null,null, null, null, false );
      isGameScreen = true;
      vGameTitleFull.Title = "Tic-Tac-Toe";
      ColorEffect.Enabled = false;
      vGameTitleFull.Subtitle = "by Serena";




  }

  $rect <490,209,690,249>
  var Application::GameScreen vGameScreen = Application::GameScreen1;

  $rect <490,250,690,290>
  var Game::GameTitle vGameTitleFull = GameTitle;

  $rect <730,50,930,90>
  property int32 Property;

  $rect <730,90,930,130>
  onset Property
  {
    // The value doesn't change - nothing to do.
    if ( pure Property == value )
      return;

    // Remember the property's new value.
    pure Property = value;

    // TO DO:
    // 
    // Now you can handle the alternation of the property.
  }

  $rect <730,130,930,170>
  onget Property
  {
    return pure Property;
  }

  $rect <720,199,920,239>
  slot onSwipeL
  {
      trace "swiped left";
      SwitchToDialog( vOtherScreen, Effects::SlideLeftCentered, Effects::SlideRightCentered, null, Effects::SlideRightCentered, null,null,null, null, null, false );
      isGameScreen = false;
      vGameTitleFull.Title = "Other ScreenSaver";
      vGameTitleFull.Subtitle = "touch to dismiss";
      ColorEffect.Enabled = true;
      

                                


  }

  $rect <270,310,470,350>
  slot DismissScreenSaver
  {
    sender; /* the method is called from the sender object */

    //SwitchToDialog( , Effects::SlideLeftCentered, Effects::SlideRightCentered, null, Effects::SlideRightCentered, null,null,null, null, null, false );
    DismissDialog( vGameTitleFull, null, null, null, null, null, false );
    //PresentDialog( currentScreen, null, null, null, null, null, null, null, null, false );

    if (isGameScreen){
      vGameTitleFull.Title = "Tic-Tac-Toe";
      ColorEffect.Enabled = false;
      vGameTitleFull.Subtitle = "by Serena";
    }
    if (!isGameScreen){
      vGameTitleFull.Title = "Other ScreenSaver";
      vGameTitleFull.Subtitle = "touch to dismiss";
      ColorEffect.Enabled = true;
    }
  }

  $rect <270,400,470,440>
  object Effects::ColorEffect ColorEffect
  {
    preset CycleDuration = 3000;
    preset Enabled = false;
    preset Value2 = Game::Mint;
    preset Outlet = ^vGameTitleFull.vSubtitle.Color;
  }

  $rect <270,350,470,390>
  var bool isGameScreen = true;

  $rect <20,20,160,60>
  object Game::PushButton PushButton
  {
    preset Bounds = <45,242,195,292>;
  }

  $rect <20,20,160,60>
  object Game::GameTitle GameTitle
  {
    preset Bounds = <0,0,240,320>;
    preset Title = "Welcome!";
    preset Subtitle = "a simple demonstration what you can do with EmWiz";
  }
}

$rect <490,30,690,70>
$output false
class OtherScreen : Core::Group
{
  $rect <0,330,200,370>
  inherited property Bounds = <0,0,240,320>;

  $rect <0,430,200,470>
  inherited method UpdateLayout()
  {
    // Always invoke the inherited method.
    super( aSize );

    /*

      HINT:

      This method exists for sophisticated layout calculation. Please note, that in 
      most cases it is completely sufficient to use the views property 'Layout' to
      determine how the view should behave when the component is resized.

    */

    /*

      TO DO:

      Put here the code to calculate new position and size of enclosed views. The
      current (new) size of the component itself is passed in the parameter aSize.
      For example:

        SomeView.Bounds = rect( 10, 10, aSize.x - 20, aSize.y - 20 );

    */
  }

  $rect <0,380,200,420>
  inherited method UpdateViewState()
  {
    // Always invoke the inherited method.
    super( aState );

    /*

      HINT 1:

      This method is invoked automatically when the state set of the component has
      been changed. The new state set can be found in the parameter aState.
      Following are the important states:

        Enabled   --> The component can react to user inputs.

        Selected  --> The component is selected in context of its owner.

        Focused   --> The component is selected in context of its owner and 
                      the owner can react to keyboard events. In this manner the
                      component is also able to react to keyboard events.

        Modal     --> The component is modal. All events are redirected to this
                      component.

      To determine whether a state is currently active or not you have to test
      the aState parameter. For example to test the 'Selected' state:

        if ( aState.contains( Core::ViewState[ Selected ]))
        {
          ... yes, this component is currently selected.
        }

    */

    /*

      HINT 2:

      Alternatively you can request this method invocation by executing explicitly
      following code:


        InvalidateViewState();

    */
      
    /*

      TO DO 1:

      Put here the code to ensure that the visual aspect of the component does
      reflect its current state. For example, depending on its 'Enabled' state
      a component may appear with full colors or pale if it is disabled:

        if ( aState.contains( Core::ViewState[ Enabled ]))
        {
          SomeBackgroundView.Opacity = 255;
          SomeTextView.Color         = #000000FF;
        }
        else
        {
          SomeBackgroundView.Opacity = 128;
          SomeTextView.Color         = #00000080;
        }


      TO DO 2:

      You can evaluate here also the state of any other member in your component.
      For example in a push-button component, the button should appear highlighted
      as long as the user holds the finger within a touch area of the button:

        if ( SomeTouchHandler.Down && SomeTouchHandler.Inside )
          HighlightedBackground.Visible = true;
        else
          HighlightedBackground.Visible = false;

      The touch handler itself only requests the update method to be called. Use
      for this purpose 'InvalidateViewState()' method.


      TO DO 3:

      You can calculate here also the position/size of views accordingly to the
      state of any other member in your component. For example in a slider you
      can calculate the position of the slider knob from some properties like
      'SliderValue' and 'SliderRange':

        SliderKnob.Bounds.origin.x = ( SliderValue * Bounds.w ) / SliderRange;

      Changing the 'SliderValue' or 'SliderRange' property should only request
      the update method to be called. Use for this purpose 'InvalidateViewState()'
      method.

    */
  }

  $rect <20,20,160,60>
  object Views::Rectangle Rectangle
  {
    preset Bounds = <0,0,240,320>;
    preset Color = Game::Peach;
  }

  $rect <20,20,160,60>
  object Core::WipeTouchHandler WipeTouchHandler
  {
    preset Bounds = <0,0,240,319>;
    preset OnBottom;
    preset NoOfFingers = 1;
  }

  $rect <20,20,160,60>
  object Views::Text Text
  {
    preset Bounds = <29,119,213,182>;
    preset String = "Text";
    preset Font = Resources::FontExtraLarge;
  }
}

$rect <250,70,450,110>
$output false
autoobject Application::GameScreen GameScreen1;

$rect <490,70,690,110>
$output false
autoobject Application::OtherScreen OtherScreen1;
